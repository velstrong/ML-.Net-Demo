@page
@model IndexModel
@using Microsoft.ML.Data;
@using System.Linq;
@{
    ViewData["Title"] = "Customer Segmentation";
    var predictedCustomers = (List<MachineLearning.Models.PredictionResult>)ViewData["PredictedCustomers"];
    string avgScore = (string)ViewData["ClusteringMetrics"];
}
<div class="row">
    <div class="col-12">
        <section>
            <h1>Customer Segmentation</h1>
        </section>

        <ul class="tabs">
            <li class="active">
                <label>Building the Model</label>
            </li>

            <li>
                <label>Training the Model</label>
            </li>

            <li>
                <label>Evaluate the Model</label>
            </li>

            <li>
                <label>Consuming the Model</label>
            </li>
        </ul>

        <ul class="tabs--content">
            <li class="tab--content">
                <p>
                    1. Prepare the data and split data for training and tests.<br />
                    <a href="javascript:void(0);">Training Data</a><br />
                    <a href="javascript:void(0);">Test Data</a>
                    <br />
                    <br />
                    2. Creating an estimator and transforming the data<br />
                    3. Choosing a trainer. In this case, a Binary Classification training. Binary or binomial classification is the task of classifying the elements of a given set into two groups (predicting which group each one belongs to)
                </p>

                <button class="btn btn-custom">Next</button>
            </li>

            <li class="tab--content">
                <p>Training the model is a process of running the chosen algorithm on a training data (with known fraud values) to tune the parameters of the model.</p>

                <div id="upload-container">
                    <form method="post" action="" enctype="multipart/form-data">
                        <input type="file" name="file" class="form-control" id="fileUpload" style="padding: 3px" /><br />
                        <input type="submit" class="btn btn-secondary" name="train" value="Train Data" />
                    </form>
                    <div id="loader">Training: </div>
                </div>
                <br />
                <button class="btn btn-custom">Next</button>
            </li>

            <li class="tab--content">
                <p>We need this step to conclude how accurate our model is.</p>
                @if (!string.IsNullOrEmpty(avgScore))
                {
                    <h2 id="trainResult">Avg Score : @avgScore</h2>
                }
                <button class="btn btn-custom">Next</button>
            </li>

            <li class="tab--content">
                <p>After the model is trained, you can use the Predict() API to predict the sentiment for new sample text.</p>

                <div class="row">
                    <div class="col-md-4">
                        <form method="post" action="" enctype="multipart/form-data">
                            <input type="file" name="file" class="form-control" id="fileUpload" style="padding: 3px" /><br />
                            <input type="submit" class="btn btn-primary" name="predict" value="Predict data" /><br />
                            <input type="submit" style="margin-top:20px;" class="btn btn-primary" name="download" value="Download data" />
                        </form>
                        
                    </div>
                    <div id="result" style="display:none" class="col-md-offset-4 col-md-4">

                        <h2>Result</h2>

                        <h3 id="predictionh">Prediction: <span id="prediction"></span></h3>

                        <h3>Score:<span id="score"></span></h3>


                    </div>
                </div>
            </li>
        </ul>
    </div>
</div>


    <br />
    @functions{
        public string GetClusterName(int cluster)
        {
            if (cluster == 1)
            {
                return "Single, Leaving, Sleeping, Novise with biggest monetary value but very rare (better than cluster 3)";
            }
            else if (cluster == 2)
            {
                return "Regular, VIP with biggest monetary value (our VIP customers)";
            }
            else if (cluster == 3)
            {
                return "Leaving, Sleeping with average monetary and frequency but very rare (a little bit better than cluster 4)";
            }
            else if (cluster == 4)
            {
                return "Lost, Single, Sleeping, Novise with small monetary value (the worst customers)";
            }
            else if (cluster == 5)
            {
                return "Regular (our regular customers)";
            }
            return string.Empty;
        }
    }

    @if (predictedCustomers != null)
    {
        var groupCustomers = predictedCustomers.GroupBy(x => x.Cluster);
        foreach (var group in groupCustomers)
        {
            <h2><b>Cluster @group.Key :</b>@GetClusterName(group.Key)</h2><br />
            foreach (var customer in group)
            {
                <p>@(customer.CustomerId) (R=@customer.R,F=@customer.F,M=@customer.M)</p>
            }

        }
    }


